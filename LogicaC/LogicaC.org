* Introducción
Francisco Hernándex Quiroz
e-mail: fhq@ciencias.unam.mx
Página web: http://lya.fciencias.unam.mx/fhq/

** Temario

1. Inducción y recursión
2. Cálculo de proposiciones
3. Cálculo de predicados
4. Programación lógica y bases de datos
5. Lógicas modales
6. Verificación de programas y otras aplicaciones de lógica modal

** Método de trabajo y evaluación
El curso será presencial pero la asistencia de las clases no es obligatoria y
los alumnos con problemas de movilidad o con capacidad autodidacta sólo tendrán
que asistir a los exámenes.

Además de la parte teórica, se realizaran prácticas de programación.

Habŕa seis tareas y tres exámenes (una tarea por tema y un examen cada 2 temas)
y 2 reposiciones de ecámenes parciales o un final. Tambien habrá seis prácticas
de programación. Los exámenes contarán el 70% de la calificación, las tareas el
15% y las prácticas el 15% restante.

* Apuntes
** 04/02/2024
*** Relaciones entre la lógica y la computación
**** ¿Qué es la lógica?

La lógica se ocupa de argumentos: una serie de premisas de la que se sigue una
conclusión. Para la lógica, la verdad de un argumento no tiene que ver con su
contenido, sino con su forma:

***** Ejemplos

Premisas:
- Todas las personas son mortales
- Sócrates es una persona

Conclusión:
- Sócrates es mortal

Premisas:
- Todos los bolovogos son misófilos.
- EL Jabberwock es un bologovo.

Conclusión:
- El Jabberwock es un misófilo.

***** Sintaxis y semántica

Un lenguaje lógico consta de:

- Sintaxis
  Son reglas que dicen qué cadenas de símbolos pertenecen al lenguaje.  Por
  ejemplo, /p => q/ es una fórmula del cálculo de proposiciones, pero /=> p)/ no
  lo es.

- Semántica
  Son reglas que la relacionan las fórmulas con un universo de significado. Por
  ejemplo, si

  - /p/ significa "México perdio con Italia" y

  - /q/ significa "México le ganó a Croacia", entonces

  - /!p^q/ significa "México no perdio con Italia y le ganó a Croacia

***** Sistemas de demostración

Un tercer elemento de un sistema lógico son las:

- Reglas de derivación
  Son las reglas que nos permiten derivar una fórmula a partir de otras.

  Ejemplo: /modus ponens/
  Que nos permite concluir /q/ a partir de /p => q/ y /p/

  $\frac{p \Rightarrow q, \; p}{q}$

**** Origen de las computadoras

- EL origen de (los modelos matemáticos de) las computadoras reside en parte en
  la lógica.

- Leibniz planteó la posibilidad de tener un lenguaje que expresara todo el
  conocimiento posible y permitiera razonar infaliblemente.

- Hilbert retomó esta idea en el siglo /XX/, aunque limitada al conocimiento
  matemático, y con la lógica como lenguaje formal.

***** Problema de la decisión

Hilbert formuló de manera más precisa la cuestión:

¿Podemos responder siempre la pregunta de si un enunciado es válido por medio de
un procedimiento efectivo?

***** Procedimiento efectivo

- Por supuesto, antes hay que definir con rigor qué es un procedimiento efectivo

- La respuesta la dio Alan Turing (entre otros)

- Y como resultado "colateral" presentó el modelo más general de computadora que
  se conoce hasta ahora.

- Este modelo inspiró a algunos de los creadores de las computadoras modernas.

Por cierto, el problema de la decisión es insoluble; y el sueño de Leibniz y
Hilbert, irrealizable.
*** Descripción y análisis de lenguajes
**** Lógica aplicada a otros lenguajes formales

- Los programas se describen por medio de sistemas formales conocidos como
  lenguajes de programación.

- Se pueden aplicar las técnicas de la lógica para estudiar estos sistemas:

  - Descripción de la sintaxis y la semántica

  - Derivación de otros programas a partir de programas ya existentes

  - Especificación y verificación de programas

**** ¿Como garantizar que un programa es correcto?

- Un programa es correcto si realiza la tarea para la que fue diseñado

- Para conseguir este objetivo se puede utilizar la lógica para especificar
  (describir formalmente) la tarea que debe realizar un programa.

- Verificar que el programa cumple con esta tarea

Nota: las pruebas por ensayo y error no son suficientes para concluir que un
programa es correcto.

**** Especificación de un programa

- La lógica puede describir sin ambigüedades las tareas que debe realizar un
  programa.

- Ejemplo: queremos un programa /P/ que calcule el factorial del número /n/
  alojado en la localidad de memoria /x/ y guarde el resultado en la localidad
  /r/  - En términos lógicos: $\{ x = 0 \wedge n \geq 0 \}P\{r = !n\}$
*** Verificación de un programa

- Es la comprobación matemática de que un programa funciona

- ¿Cómo se verifican los programas? Se comprueba la siguiente relacion:

  Significado de programa <=> Especificación formal

**** ¿Qué pasa cuando no se verifican los programas?

- Ejemplo 1: /el control de la propulsión del Boeing 737/.
  El sistema se apagaba cuando el avión alcanzaba la velocidad de 60 nudos. Los
  programadores indicaron qué hacer a más de 60 nudos y a menos de 60 nudos,
  pero olvidaron decir qué pasaba exactamente a 60 nudos.

- Ejemplo 2: /el Skylab/
  Se desplomó por un error de asignación de valor a una variable. El valor era
  un número de punto flotante, pero la variable era entera. La acumulación de
  errores causí una desviación en la órbita del satélite.

**** Técnicas para la verificación

Hay 2 tipos de técnicas de verificación

***** Verificación de modelos

- En verificación de modelos se exploran los posibles estados de un sistema y se
  demuestra que se cumple una propiedad

- Es una técnica común en la verificación de /hardware/ y de sistemas
  concurrentes  - Con frecuencia se basa en lógicas no clásicas
***** Técnicas de demostración

- Se basan en reglas de derivación sintáctica

- Algunas son totalmente automatizables

- Un ejemplo es un sistema basado en la aritmética de Pressburger llamado Spec#

- Spec# permite verificar programas en C#

*** Otras tres áreas de aplicación directa de la lógica
**** Programación logica

Los programas son las premisas y la salida del programa es la conclusión. Si
/F(x,y)/ quiere decir "/y/ es el factorial de /x/", entonces podemos tener este
programa lógico:

Premisas:

- F(0,1)

- F(1,1)

- $\forall x, \; \forall y \; F(x,y) \Rightarrow F(x+1,y \times (x+1))$

- ¿F(3,x)?

Conclusión:

- F(3,6)

**** Bases de datos

Si en una base de datos hay un registro de la siguiente forma:

- Nombre: Francisco Hernández Quiroz
- Profesión: Profesor
- Institución: UNAM

Una búsqueda en la base de datos con la pregunta "¿profesión = investigador?" es
una demostración del enunciado:

$\exists x \; p(x)=i$

Donde p(x) es una función que nos da la profesión de /x/ e /i/ significa
"investigador"

**** Sistemas expertos y representación del conocimiento

- La lógica es una de las técnicas básicas en inteligencia artificial

- Un sistema experto es un sistema de demostración lógico y con principios que
  describen el dominio específico del sistema (por ejemplo, un sistema de
  consulta médica)

- Los principios cumplen el papel de las /premisas/. La respuesta a la consulta
  es la /conclusión/

**** Aplicaciones a otras ciencias

- Las técnicas surgidas de la interacción entre lógica y computación se aplican
  ahora a otras disciplinas.

- Un ejemplo es la teoría de la concurrencia y su utilización en lógica.

***** Modelos formales para concurrencia

- Los sistemas concurrentes implican la interacción simultánea entre distintos
  componentes.

- Existen diversos lenguajes formales para representar esta interacción

- Algunos de los más populares son las álgebras de procesos

- Estas álgebras suelen estar acompañadas por lenguajes lógicos para su
  especificación y verificación

***** Aplicaciones en biología

- Las álgebras de procesos y sus lógicas se utilizan para modelar sistemas
  biológicos

- Ejemplo 1:
  Las señales bioquímicas en una celula

- Ejemplo 2:
  La interacción entre genes

- Ejemplo 3:
  Los componentes celulares delimitados por membranas

***** Lógica y computación

- La lógica no es una materia más que hay que superar para obtener un título en
  computación

- La lógica tiene una relación larga y fructífera con las ciencias de la computación

- También empieza a producir resultados aplciables en otras ciencias

** 06/02/2024
*** Inducción  y recursión
**** Conjuntos inductivos
***** Definiciones "circulares"

Es común definir un conjunto de manera "circular". Por ejemplo, las fórmulas del
cálculo de proposiciones:

"Si $\varphi$ y $\psi$ son proposiciones, entonces $\neg \varphi$ y $\varphi
\lor \psi$ son proposiciones"

Si la deifinición anterior fuera realmente circular, sería incorrecta. En
realidad, el conjunto anterior está definido de manera /inductiva/. Una
definición inductiva parte de un conjunto básico y de un conjunto de funciones
para generar nuevos elementos.

- /Nota:/
  En algunos textos se llama /recursivas/ a estas definiciones. Esto es un error
  terminológico.

***** Conjuntos inductivos

Sea $A \subseteq U$ un conjunto y sea $F = \{f_i^n : U^n \rightarrow U \}$
un conjunto de funciones. Diremos que A es cerrado bajo F sii

$\forall f_k^n \in F$ y $\forall a_1,a_2,\cdots,a_n \in A$ resulta que
$f_k^n(a_1,a_2,\cdots,a_n) \in A$

Sea $X \subseteq U$. Entonces un conjunto $Y \subseteq U$
es inductivo en X bajo F sii

$X \subseteq Y$ y Y es cerrado bajo F

***** Cerradura inductiva

Sea $X \subseteq U$ y sea $F=\{f_i^{n} : U^{n} \rightarrow U\}$ un conjunto de funciones.

La /cerradura inductiva/ de X bajo F, construida de abajo hacia arriba, es:

$X_0 = X$
$X_{i+1} = X_i \cup {f_k^{n}(x_1,x_2, \cdots, x_n)} \; | \; f_k^n \in F \land x_1,x_2,\cdots,x_n \in X_i$
$X_{+} = \bigcup_{i \in \mathbb{N}} X_i$

Sea $\chi$ la familia de conjuntos inductivos en X bajo F. La cerradura
inductiva de X bajo F, construida de arriba hacia abajo es el conjunto:

$X^{+} = \bigcap_{Y \in \chi} Y$

***** Equivalencia

Ambas definiciones son equivalentes, es decir X_+ = X^+

/Demostración/. Es claro que X_+ es inductivo en X y como X^+ es la intersección
de los conjuntos inductivos en X, se tiene que $X^+ \subseteq X_+$.

La otra contención se demostrara por inducción matemática:

- Caso base
  $X_0 = X \subseteq X^+$

- Hipótesis inductiva
  $X_i \subseteq X^+$

- Por demostrar que $X_{i+1} \subseteq X^+$.
  Pero esto último se sigue del hecho de que X⁺ es cerrado.

Por inducción, $\forall n \in \mathbb{N}$. $X_n \subseteq X^+$. Entonces $X_+ \subseteq X^+$

***** Ejemplo 1
Ahora podemos definir el cálculo de proposiciones inductivamente.
Sea $\Sigma = \{p,q,r,p_1,\cdots\} \cup \{(,)\} \cup \{\lor,\neg\}$ un alfabeto
y sean $\neg \varsigma : \Sigma^* \rightarrow \Sigma^*$ y  $\lor \varsigma : \Sigma^* \times \Sigma^* \rightarrow \Sigma^*$
las funciones definidas asi:

$\neg \varsigma (\alpha) = \neg \alpha$
$\lor \varsigma (\alpha , \beta) = (\alpha \lor \beta)$

Sea $P_a = \{ p, q, r, p_1, \cdots \}$ el conjunto básico. El conjunto de
fórmulas del cálculo de proposiciones /P/, se define usando los dós métodos:

$P_0 = P_a$
$F = \{\neg \varsigma, \lor \varsigma \}, \; n \in \{1,2\}$
$P_{i+1} = P_i \cup \{f_i^n(x_1, \cdots, x_n)\} \; | \; f_i^n \in F, \; x_1, \cdots, x_n \in P_i$
$P = \bigcup_{i \in \mathbb{N}} P_i$

**** Relaciones bien fundadas
***** Relaciones binarias

Si 2 elementos a, b de un conjunto están en una relación R se escribirá
" $(a,b) \in R$ ", " a R b " o " R(a,b) ".

Sea A un conjunto y sea $R \subseteq A \times A$. Se dice que R es:

- *Reflexiva* sii $\forall a \in A \; R(a,a)$

- *Simétrica* sii $\forall a,b \in A \; R(a,b) \Rightarrow R(b,a)$

- *Antisimétrica* sii $\forall a,b \in A \; R(a,b) \land R(b,a) \Rightarrow a=b$

- *Transitiva* sii $\forall a,b,c \in A \quad R(a,b) \land R(b,c) \Rightarrow R(a,c)$

- *Total* sii $\forall a,b \in A \quad a \neq b \Rightarrow R(a,b) \land R(b,a)$
***** Cerraduras reflexivas y transitivas

Dada una relación R en A x A se puede construir sus cerraduras /transitiva/ y
/reflexiva y transitiva/, denotadas por R⁺ y R^*, respectivamente:

$R^0 = \{(a,a) \; | \; a \in A\}$
$R_1 = R$
$R^{n+1} = R^n \cup \{(a,c) | \exists b \quad (a,b) \in R^n \land (b,c) \in R^n\}$
$R^+ = \bigcup_{n \in \mathbb{N}} R^{n+1}$
$R^* = \bigcup_{n \in \mathbb{N}} R^n$
***** Órdenes

En matemáicas hay un tipo de relaciones muy comunes llamadas órdenes. Sin
embargo, los órdenes vienen en distintos sabores.

- Una relación R es un *pre-orden* (o *cuasi-orden*) sii es reflexiva y transitiva

- Un *orden parcial* (o *poset*) es una relación reflexiva, transitiva y aintisimétrica

- Un *orden total* o *lineal* es simplemente una relación total.
  Observese cómo no se supone que tenga ninguna otra propiedad

****** Ejemplos

- El orden parcial más conocido es $\leq$ en $\mathbb{N}$

- En el mismo conjunto, < es un orden total

- Un ejemplo de pre-orden en $P(\mathbb{N})$ es el /preorden inferior/ o de
  /Hoare/:

  $A \sqsubseteq_L B$ sii $\forall a \in A. \; \exists b \in B. \; a \leq b$


Se usaran con frecuencia los simbolos $\prec$ y $\succ$ para denotar
relaciones de orden arbitrarias.
***** Órdenes en n-adas

Una relación de orden en A se puede extender a A^n en dos formas:

****** Orden lexicográfico

La relación $\prec_{lex} \subseteq (A \times A) \times (A \times A)$ se define asi:



$(a,b) \prec_{lex} (a',b')$ sii $a \prec a'$ y $a \neq a'$ o $a=a'$ y $b \prec b'$

La definición anterior se extiende a A^n de la misma forma en que se extiende el
concepto de par ordenado a n-adas arbitrarias.

****** Orden por coordenadas

$\prec_{coor}$ es la siguiente relación:

$(a,b) \prec_{coor} (a',b')$ sii $a \prec a'$ y $b \prec b'$,

que se extiende del miso modo a n-adas arbitrarias.

***** Máximos, minimos, etc

Conviene dar nombre a algunos elementos especiales de un conjunto ordenado:

Sea $\prec$ una relación en AxA y sea $X\subseteq A$. Se dice que
$x \in X$ es un:

- mínimo sii $\forall y \in X \quad x \neq y \Rightarrow x \prec y$

- máximo sii $\forall y \in X \quad x \neq y \Rightarrow y \prec x$

- minimal sii $\neg \exists y \in X \quad x \neq y \land y \prec x$

- maximal sii $\neg \exists y \in X \quad x \neq y \land x \prec y$

****** Un caso extraño

En un orden parcial, un mínimo es un minimal, pero esto no es necesariamente el
caso en un preorden. Más adelante se verán otros órdenes en los que los mínimos
son siempre minimales.

***** Cadenas

Sea $\prec$ un orden en $U \times U$ y sea $C \subseteq U$

Decimos que C es una cadena sii $\forall x,y \in C$ es el caso
que $x \prec y$ o $y \prec x$

Una cadena descendente infinita es una cadena C tal que $\forall x \in C$,
$\exists y \in C$ tal que $y \prec x$

De manera dual, una cadena infinita ascendente C tiene la propiedad
de que $\forall x \in C$, $\exists y \in C$ tal que $x \prec y$

Obsérvese cómo una cadena $C \subseteq U$ es un subconjunto de U que visto de
manera aislada forma un orden total.

***** Órdenes bien fundados

Las cadenas descendentes nos permiten caracterizar los órdenes bien fundados.

Sea $\prec \subseteq U \times U$ una relación. Decimos que $\prec$ es bien
fundado sii no existen cadenas infinitas descendentes en U.

Por ejemplo, < en los naturales.

Sea $\prec$ una relación bien fundada. Entonces:

- $\prec$ no es reflexiva ni simétrica

- Su cerradura transitiva es bien fundada

- Los órdenes lexicográficos y por coordenadas basados en $\prec$ son bien fundadas

- $\prec^*$ es un orden parcial

***** Relaciones bien fundadas alternativo

Una relación $\prec$ es bien fundada en $A \times A$ sii todo
$X \subseteq A \; (X \neq \varnothing)$ tiene un minimal.

***** Principio de inducción

Sea /P/ una propiedad de elementos de A y sea $\prec \subseteq A \times A$
La siguiente afirmación se conoce como el principio de inducción:

$(\forall a \in A \quad P(a)) \iff (\forall a \in A (\forall b \in A \quad b \prec a \Rightarrow P(b)) \Rightarrow P(a))$

Este principio se aplica en conjuntos donde $\prec$ es un orden bien fundado:

Sea $\prec \subseteq A \times A$ una relación bien fundada y sea /P/ : A => {V,F}
un predicado. Entonces el principio de inducción vale

****** Demostraciones por inducción

El principio de inducción nos da una estrategia para demostrar una propiedad /P/
en un conjunto A con una relación bien fundada $\prec$

1. Se demuestra que todos los elementos mínimos cumplen /P/

2. Se asume una hipótesis inductiva
   $\forall b \in A \quad b \prec a \Rightarrow P(b)$

3. Se demuestra que entonces P(a)
